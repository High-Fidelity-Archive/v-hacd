project(VHACD CXX C)
include(${CMAKE_COMMON_INC})

#include(FindOpenCL)
include(FindOpenMP)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()
set(LIB_TYPE "STATIC" CACHE STRING "STATIC, SHARED or MODULE?")
message("[VHACD] \t LIB_TYPE " ${LIB_TYPE})

#if (CMAKE_BUILD_TYPE EQUAL "DEBUG")
#set(TARGETNAME VHACD_d)
#else (CMAKE_BUILD_TYPE EQUAL "DEBUG")
#set(TARGETNAME VHACD)
#endif (CMAKE_BUILD_TYPE EQUAL "DEBUG")

add_library(VHACD ${PROJECT_CPP_FILES} ${PROJECT_C_FILES} ${PROJECT_INC_FILES} ${PROJECT_INL_FILES} ${PROJECT_CL_FILES})
set_target_properties(VHACD PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")
if (OpenCL_FOUND)
    include_directories("${OpenCL_INCLUDE_DIRS}")
    add_definitions( -DOPENCL_FOUND=1 )
    add_definitions( -DOPENCL_CL_FILES="${PROJECT_CL_FILES}" )
endif()

message("[VHACD] \t -> CMAKE_INSTALL_PREFIX " ${CMAKE_INSTALL_PREFIX})
if(WIN32)
install(TARGETS VHACD ARCHIVE DESTINATION lib/Debug CONFIGURATIONS Debug)
install(TARGETS VHACD ARCHIVE DESTINATION lib/Release CONFIGURATIONS Release)
else(WIN32)
install(TARGETS VHACD DESTINATION lib)
endif(WIN32)

install(FILES ${PROJECT_INC_FILES} DESTINATION include)
install(FILES ${PROJECT_INL_FILES} DESTINATION include)

